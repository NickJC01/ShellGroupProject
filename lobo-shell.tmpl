--------------------------------------------------------------------------

            +-------------------------+
            | CS 450                  |
            | PROJECT: LOBO SHELL     |
            | DESIGN DOCUMENT         |
            +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Meaghan Boykin boykinm@sonoma.edu
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission or
>> bug notes for the course staff, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than man pages, course
>> text, lecture notes, and course staff.

Use of u_int8_t was learned in CS 351.
sysError() taken from pipe_demo.c


               LOBO SHELL
               ==========

---- EXPLORE THE PROBLEM ----

>> A1: To open a file for I/O re-direction requires various flags
>> and parameters passed to the open() call. Explore bash as an
>> example shell and list the parameters used in
>>     open(bar,...)
>> for each of these scenarios:
>>   (i) foo > bar
>>  (ii) foo < bar
>> (iii) foo >> bar

>> A2: Create scenarios to test and describe how bash behaves in
>> each of these scenarios:
>>   (i) foo < bar, when "bar" does not exist?
>>  (ii) foo < bar, when "bar" exists but you lack permission to read it?
>> (iii) foo > bar, when "bar" exists but you lack permission to write it?
>>  (iv) foo > bar, when "bar" cannot be created?
>> In each case, give the commands you used to create and evaluate 
>> the scenario.

>> A3: Unix pipes allow synchronization among processes to facilitate
>> interprocess communication (IPC). Consider a pipeline of arbitrary
>> length, like:
>>     P[0] | P[1] | ... | P[i-1] | P[i] | P[i+1] | ... | P[n]
>> Imagine a loop, like:
>>     for i in 0 .. n: 
>>         set-up-pipeline-for( process P[i] )
>> What prior-created pipes would be used with process P[i]?
>> What new pipes need to be created to set up P[i]'s pipeline?

The pipe created by P[i-1], which it wrote to, would be used in P[i]
to read from. If P[i] is followed by a |, it would need
to create a new pipe to write to.

---- DATA STRUCTURES ----

>> A4: Copy here the declaration of each new `struct',
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

None of the above types were created.

---- FUNCTIONS ----

>> A5: Provide a prototype and documentation for each function
>> you have introduced to support this portion of the project.
>> Use the Google Style Guide for function documentation.

// Writes an error message to stderr and exits.
void syserror(const char *);

// Given lWords, a list of all words in the line, and lIndex, the index
// to begin extracting words from, this function extracts the words used
// in calling a process and puts them in pWords.
// It detects the end of a process's words when it reaches | or NULL.
u_int8_t getProcessWords(char *pWords[], char *lWords[], int *lIndex);

// Given words[], the words used to call the process, this function forks
// a new process and execs according to words.
void forkAndExec(char *words[]);

// Given words[], the words used to call the process, this function forks
// a new process, creates a new pipe to write to (storing it in pipes[numPipes]),
// and execs according to words.
void forkAndExecWR(char *words[], int *pipes[], int numPipes);

// Given words[], the words used to call the process, this function forks
// a new process, reads from pipes[numPipes - 1], and execs according to words. 
void forkAndExecRD(char *words[], int *pipes[], int numPipes);

// Given words[], the words used to call the process, this function forks
// a new process, reads from pipes[numPipes - 1], creates a new pipe to write to
// (storing it in pipes[numPipes]), and execs according to words. 
void forkAndExecRDWR(char *words[], int *pipes[], int numPipes);

// Given pipes[], the list of all created pipes, and numPipes, this function
// loops through pipes[0] to pipes[numPipes - 1], closing both ends of the pipe
// and freeing them.
void closeAllPipes(int *pipes[], int numPipes);

// Given words[], the words used to call the process, this function detects 
// stdin and stdout overrides, executes them, and removes the override tokens
// from words so it can be used in any of the forkAndExec functions.
void handleRedirects(char *words[]);

// Given words[], this function removes the override tokens
// from words so it can be used in any of the forkAndExec functions.
// It is called in handleRedirects()
void remove_redirect_tokens(char *words[], int index);

---- ALGORITHMS ----

>> A6: Briefly describe how the functions (from A3) are called
>> when your shell is processing the user-entered commands:
>>   foo 1 2 | bar 3 4

First, getProcessWords() is called in the parent to extract foo 1 2.
Because getProcessWords() ended on a pipe but no pipes to read from
have been created yet, forkAndExecWr() is called to exec foo. Within
forkAndExecWr(), handleRedirects() is called to search for and <, > or
>> and override stdin or stdout if needed, but it is not. forkAndExecWr()
calls closeAllPipes() before exec().

Then, getProcessWords() is called again in the parent to extract bar 3 4.
Because getProcessWords() ended on a NULL and there exists a pipe to read 
from, forkAndExecRD() is called to exec bar. Within
forkAndExecRD(), handleRedirects() is called to search for and <, > or
>> and override stdin or stdout if needed, but it is not. forkAndExecRD()
calls closeAllPipes() before exec().

Lastly, the parent calls closeAllPipes().

>> A7: Briefly describe your approch for reaping child processes. When do
>> you reap, and how much do you reap at a time? Would it be possible to
>> reap children earlier than your current implementation and, if so,
>> what situations might that benefit?

When getProcessWords() returns indicating it hit a NULL, the parent
processes knows the end of the line has been hit and no more processes
will be created. With this, in main(), the parent waits for all children
and reaps them using while (wait(NULL) != -1).

---- RATIONALE ----

>> A8: Does any aspect of our shell require multithreading or related
>> synchronization primitives (locks, semaphores)? Is the bash shell
>> (http://git.savannah.gnu.org/cgit/bash.git/) multithreaded?
>> What did you grep to determine the answer?

>> A9: Develop a new test, not covered by existing tests. Provide the 
>> code implementing that test. When possible, follow the format of 
>> existing tests. Explain what functionality it tests and how it goes 
>> beyond the provided tests.




               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Any other comments?
